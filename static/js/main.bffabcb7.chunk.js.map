{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["topicText","fontFamily","fontStyle","fontSize","fontColor","plainText","smallText","App","props","state","src","JavaScript","TypeScript","Golang","Python","Docker","Fargate","Terraform","Lambda","API","S3","Dynamo","Athena","Aurora","MySQL","React","Koa","Mocha","Istanbul","Git","Codebuild","Codedeploy","Codepipeline","window","Image","onload","setState","className","style","href","target","rel","width","height","x","y","image","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bffabcb7.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport './text.css';\nimport {\n  Stage,\n  Layer,\n  Group,\n  Image\n} from 'react-konva';\n\nconst topicText = {\n  fontFamily: 'GyeonggiTitleM',\n  fontStyle: 'normal',\n  fontSize: 26,\n  fontColor: '#333333'\n}\n\nconst plainText = {\n  fontFamily: 'GyeonggiTitleM',\n  fontStyle: 'normal',\n  fontSize: 20,\n  fontColor: '#333333'\n}\n\nconst smallText = {\n  fontFamily: 'GyeonggiTitleM',\n  fontStyle: 'normal',\n  fontSize: 14,\n  fontColor: '#333333'\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      src: null,\n      JavaScript: null,\n      TypeScript: null,\n      Golang: null,\n      Python: null,\n      Docker: null,\n      Fargate: null,\n      Terraform: null,\n      Lambda: null,\n      API: null,\n      S3: null,\n      Dynamo: null,\n      Athena: null,\n      Aurora: null,\n      MySQL: null,\n      React: null,\n      Koa: null,\n      Mocha: null,\n      Istanbul: null,\n      Git: null,\n      Codebuild: null,\n      Codedeploy: null,\n      Codepipeline: null\n    };\n  }\n\n  componentDidMount() {\n    const src = new window.Image();\n    src.src = \"/cv/src.png\";\n    src.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        src: src\n      });\n    };\n    const JavaScript = new window.Image();\n    JavaScript.src = \"/cv/JavaScript.png\";\n    JavaScript.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        JavaScript: JavaScript\n      });\n    };\n    const TypeScript = new window.Image();\n    TypeScript.src = \"/cv/Typescript.png\";\n    TypeScript.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        TypeScript: TypeScript\n      });\n    };\n    const Golang = new window.Image();\n    Golang.src = \"/cv/Golang.png\";\n    Golang.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Golang: Golang\n      });\n    };\n    const Python = new window.Image();\n    Python.src = \"/cv/Python.png\";\n    Python.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Python: Python\n      });\n    };\n    const Docker = new window.Image();\n    Docker.src = \"/cv/Docker.png\";\n    Docker.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Docker: Docker\n      });\n    };\n    const Fargate = new window.Image();\n    Fargate.src = \"/cv/Fargate.png\";\n    Fargate.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Fargate: Fargate\n      });\n    };\n    const Terraform = new window.Image();\n    Terraform.src = \"/cv/Terraform.png\";\n    Terraform.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Terraform: Terraform\n      });\n    };\n    const Lambda = new window.Image();\n    Lambda.src = \"/cv/Lambda.svg\";\n    Lambda.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Lambda: Lambda\n      });\n    };\n    const API = new window.Image();\n    API.src = \"/cv/API.png\";\n    API.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        API: API\n      });\n    };\n    const S3 = new window.Image();\n    S3.src = \"/cv/S3.png\";\n    S3.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        S3: S3\n      });\n    };\n    const Dynamo = new window.Image();\n    Dynamo.src = \"/cv/Dynamo.png\";\n    Dynamo.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Dynamo: Dynamo\n      });\n    };\n    const Athena = new window.Image();\n    Athena.src = \"/cv/Athena.png\";\n    Athena.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Athena: Athena\n      });\n    };\n    const Aurora = new window.Image();\n    Aurora.src = \"/cv/Aurora.jpeg\";\n    Aurora.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Aurora: Aurora\n      });\n    };\n    const MySQL = new window.Image();\n    MySQL.src = \"/cv/MySQL.jpg\";\n    MySQL.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        MySQL: MySQL\n      });\n    };\n    const React = new window.Image();\n    React.src = \"/cv/React.svg\";\n    React.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        React: React\n      });\n    };\n    const Koa = new window.Image();\n    Koa.src = \"/cv/Koa.png\";\n    Koa.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Koa: Koa\n      });\n    };\n    const Mocha = new window.Image();\n    Mocha.src = \"/cv/Mocha.png\";\n    Mocha.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Mocha: Mocha\n      });\n    };\n    const Istanbul = new window.Image();\n    Istanbul.src = \"/cv/Istanbul.png\";\n    Istanbul.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Istanbul: Istanbul\n      });\n    };\n    const Git = new window.Image();\n    Git.src = \"/cv/Git.png\";\n    Git.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Git: Git\n      });\n    };\n    const Codebuild = new window.Image();\n    Codebuild.src = \"/cv/Codebuild.png\";\n    Codebuild.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Codebuild: Codebuild\n      });\n    };\n    const Codedeploy = new window.Image();\n    Codedeploy.src = \"/cv/Codedeploy.png\";\n    Codedeploy.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Codedeploy: Codedeploy\n      });\n    };\n    const Codepipeline = new window.Image();\n    Codepipeline.src = \"/cv/Codepipeline.png\";\n    Codepipeline.onload = () => {\n      // setState will redraw layer\n      // because \"image\" property is changed\n      this.setState({\n        Codepipeline: Codepipeline\n      });\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={plainText}>\n        Min Yoon, Backend Engineer<br/>\n        Phone: (+82) 10-5517-0290<br/>\n        E-mail: stdev17@gmail.com<br/>\n        Github: <a href=\"https://github.com/stdev17\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/stdev17</a>\n        </div>\n        <div className=\"marg\" style={smallText}>\n        ※ 병특 보충역 신규 희망합니다.\n        </div>\n        <div className=\"marg\" style={topicText}>\n          <br/>\n          Objectives\n        </div>\n        <div className=\"marg\" style={plainText}>\n          저는 하나의 세계를 창조할 수 있다는 매력을 알고 개발에 빠져들게 되었습니다.\n          그리고 이제는 세상을 움직이는 서비스를 만들고 서비스의 가치를 더하고 싶습니다.\n          그러기 위해 노동 중심보다는 시스템 중심으로 일하고, 이를 동료들과 힘을 합해 가꾸어 나가고 싶습니다.<br/><br/>\n          저는 제가 백엔드 로직 개발 및 인프라 관리에 적성이 있다고 판단하였고, 이를 위한 기술 스택을 탐색해 보았습니다.<br/><br/>\n          - 우선 프로젝트 진행에 필요한 의사 결정 능력을 갖추고, 동료들과 코드, 개발 이슈, API 스펙 등을 공유할 수 있도록 관련 기술을 익혔습니다.<br/>\n          - 코드 품질을 관리하기 위해 정적 분석과 테스트 케이스를 관리하고, 지속적 통합/배포 파이프라인을 구축해 보았습니다.<br/>\n          - RDB와 NoSQL에 걸친 데이터베이스를 활용하여 어플리케이션을 개발하였고, 인프라를 모니터링하며 서비스에 발생한 장애도 복구해 왔습니다.<br/><br/>\n          앞으로도 협업을 위한 기술 스택과 커뮤니케이션 능력을 개발하여, 프로덕션에서 실질적으로 기여할 수 있는 능력을 키우고자 합니다.\n        </div>\n        <div className=\"marg\" style={topicText}>\n          <br/>\n          Project\n        </div>\n        <Stage width={700} height={475}>\n        <Layer>\n        <Image\n          x={0}\n          y={20}\n          width={700}\n          height={455}\n          image={this.state.src}\n        />\n        </Layer>\n        </Stage>\n        <div className=\"marg\" style={plainText}>\n        - ArenaTime (게임 대전 결과 DB)<br/>\n        - <a href=\"https://github.com/stdev17/arenatime\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/stdev17/arenatime</a><br/>\n        - <a href=\"https://stdev17.github.io/arenatime\" target=\"_blank\" rel=\"noopener noreferrer\">https://stdev17.github.io/arenatime</a> 에서 테스트 해보실 수 있습니다.\n        </div>\n        <div className=\"marg\" style={plainText}>\n        하루에 API 호출이 3,000회가 넘어가는 인기 서비스입니다.\n        단순 등록과 검색부터 시작해서, Batch-job으로 이루어지는 메타 통계가 존재합니다.\n        서비스를 날로 거듭하며 장애율도 점차 낮아지고 있습니다.<br/><br/>\n        우선 클라이언트 단에서는 React를 기반으로 CSS와 Konva, Bootstrap으로 UI를 구성했습니다.\n        서버 단은 취미 프로젝트다 보니 비용 절감과 관리 편의를 위해 서버리스 환경으로 결정했습니다.\n        Serverless 프레임워크를 기반으로, 웹 서버는 API Gateway, 컴퓨팅 엔진은 Lambda, 스토리지는 S3, DB는 DynamoDB를 채택했습니다.<br/><br/>\n        대전 이미지 파일은 base64 인코딩으로 처리하여 S3에 적재 및 다운로드가 원활히 이루어지도록 했습니다.\n        대전 결과는 DynamoDB에 적재하는 동시에, gzip으로 압축 및 aggregate하여 S3에 보관하도록 했습니다.\n        이후 결과 파일을 Athena에서 Cloudwatch 스케줄링으로 주기적으로 Batch-job하여 DynamoDB에 담아두고 그 통계 결과를 서빙하도록 했습니다.\n        또 Athena를 사용하여 실시간으로 결과를 서빙하는 API도 구현했습니다.<br/><br/>\n        Lambda 코드를 TypeScript로 이관한 후에는 정적 분석, 유닛 테스트, 커버리지 도구, API 스펙 문서화 도구를 사용하여\n        코드 품질 관리를 연습하고 있습니다.\n        </div>\n        <div className=\"marg\" style={topicText}>\n          <br/>\n          Stack\n        </div>\n        <div className=\"marg\" style={plainText}>\n          저는 이런 기술들에 관심이 있어요\n        </div>\n        <Stage width={700} height={1030}>\n        <Layer>\n        <Group>\n        <Image\n          x={20}\n          y={20}\n          width={140}\n          height={140}\n          image={this.state.JavaScript}\n        />\n        <Image\n          x={193.3}\n          y={20}\n          width={140}\n          height={140}\n          image={this.state.TypeScript}\n        />\n        <Image\n          x={366.6}\n          y={20}\n          width={140}\n          height={140}\n          image={this.state.Golang}\n        />\n        <Image\n          x={540}\n          y={20}\n          width={140}\n          height={140}\n          image={this.state.Python}\n        />\n        </Group>\n        <Group>\n        <Image\n          x={100}\n          y={190}\n          width={140}\n          height={140}\n          image={this.state.Docker}\n        />\n        <Image\n          x={280}\n          y={190}\n          width={140}\n          height={140}\n          image={this.state.Fargate}\n        />\n        <Image\n          x={460}\n          y={190}\n          width={140}\n          height={140}\n          image={this.state.Terraform}\n        />\n        </Group>\n        <Group>\n        <Image\n          x={20}\n          y={360}\n          width={140}\n          height={140}\n          image={this.state.Lambda}\n        />\n        <Image\n          x={193.3}\n          y={360}\n          width={140}\n          height={140}\n          image={this.state.API}\n        />\n        <Image\n          x={366.6}\n          y={360}\n          width={140}\n          height={140}\n          image={this.state.S3}\n        />\n        <Image\n          x={540}\n          y={360}\n          width={140}\n          height={140}\n          image={this.state.Dynamo}\n        />\n        </Group>\n        <Group>\n        <Image\n          x={100}\n          y={530}\n          width={140}\n          height={140}\n          image={this.state.Athena}\n        />\n        <Image\n          x={280}\n          y={530}\n          width={140}\n          height={140}\n          image={this.state.Aurora}\n        />\n        <Image\n          x={460}\n          y={530}\n          width={140}\n          height={140}\n          image={this.state.MySQL}\n        />\n        </Group>\n        \n        <Group>\n        <Image\n          x={20}\n          y={700}\n          width={140}\n          height={140}\n          image={this.state.React}\n        />\n        <Image\n          x={193.3}\n          y={700}\n          width={140}\n          height={140}\n          image={this.state.Koa}\n        />\n        <Image\n          x={366.6}\n          y={700}\n          width={140}\n          height={140}\n          image={this.state.Mocha}\n        />\n        <Image\n          x={540}\n          y={700}\n          width={140}\n          height={140}\n          image={this.state.Istanbul}\n        />\n        </Group>\n        <Group>\n        <Image\n          x={20}\n          y={870}\n          width={140}\n          height={140}\n          image={this.state.Git}\n        />\n        <Image\n          x={193.3}\n          y={870}\n          width={140}\n          height={140}\n          image={this.state.Codebuild}\n        />\n        <Image\n          x={366.6}\n          y={870}\n          width={140}\n          height={140}\n          image={this.state.Codedeploy}\n        />\n        <Image\n          x={540}\n          y={870}\n          width={140}\n          height={140}\n          image={this.state.Codepipeline}\n        />\n        </Group>\n        </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}